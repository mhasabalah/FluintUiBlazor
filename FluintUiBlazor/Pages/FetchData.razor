@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentDataGrid ResizableColumns=true Pagination="@pagination" RowsData=@forecasts GridTemplateColumns="0.2fr 1fr 0.2fr 0.2fr 0.2fr 0.2fr" style="height: 405px; overflow:auto;">
        <PropertyColumn Property="@(c => c.Summary)" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleWeatherForecastFilter" @onchange="HandleClear" Placeholder="Weather Forecast name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Title="Date" Property="@(c => c.Summary)" Sortable="true" Align=Align.Left />
        <PropertyColumn Title="Temp. (C)" Property="@(c => c.TemperatureC)" Sortable="true" Align=Align.Center />
        <PropertyColumn Title="Temp. (F)" Property="@(c => c.TemperatureF)" Sortable="true" Align=Align.Center />
        <PropertyColumn Title="Summary" Property="@(c => c.Date)" Sortable="true" Align=Align.Right />
        <PropertyColumn Title="Summary" Property="@(c => c.TemperatureF)" Sortable="true" Align=Align.Right />
    </FluentDataGrid>
}
<FluentPaginator Value="pagination" />


@code {
    private IQueryable<WeatherForecast> forecasts;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };


    string nameFilter = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        forecasts = (await Http.GetFromJsonAsync<List<WeatherForecast>>("sample-data/weather.json"))!.AsQueryable();
    }

    IQueryable<WeatherForecast>? FilteredItems => forecasts?.Where(x => x.Summary.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
    private void HandleWeatherForecastFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear(ChangeEventArgs args)
    {
        if (args is not null && string.IsNullOrWhiteSpace(args.Value?.ToString()))
        {
            nameFilter = string.Empty;
        }
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }


}